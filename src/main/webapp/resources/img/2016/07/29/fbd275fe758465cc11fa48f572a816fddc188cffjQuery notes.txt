jQuery notes 2016/7/8

一、基础选择器：
	-#id 选择器
		--根据id选择器获取页面中指定的标签元素，且返回唯一一个元素。
	-element 选择器
		--jQuery中可以根据元素名查找元素，格式如下：$(“element”)
		--attr()方法的功能是设置或获取元素的某项属性值。$("button").attr("disabled","true");
	-.class 选择器
		--.class参数表示元素的CSS类别(类选择器)名称
	-* 选择器
		--$(“*”)，例如$(“div *”)的方式获取<div>元素中的子元素
		--效率有可能会低
	-sele1,sele2,seleN选择器
		--$("div,p")
		--$(".class,.class")
	-ance desc选择器
		--$("div span")
		--获取了在<div>元素中的两个元素，一个是<p>元素中的子元素，另一个是<p>元素外的同级元素，
			但它们都是在一个<div>元素下，也就是说在一个“家族”下。
	-parent > child选择器
		--$("div>span")选择器代码，获取的是<div>“家庭中”全部“子辈”<span>元素，
			不包括“孙辈”<span>元素和“家庭外”的<span>元素。
	-prev + next选择器
		--“prev”元素最紧邻的下一个元素由“next”选择器返回的并且只返回唯的一个元素。
		--即获取指定prev的next
	-prev ~ siblings选择器
		--获取prev 元素后面全部相邻的元素
		--相邻指的是同级
	-星号全部 逗号不相干 空格子孙孙辈  大于子辈 加号弟弟  波浪所有弟弟
二、过滤性选择器：
	-:first过滤选择器
		--$(“li:first”) $("li:last")
		--可以组合
	-:eq(index)过滤选择器
		--$("li:eq(n)")
		--其中参数index表示索引号，它从0开始
		--负数也可以
	-:contains(text)过滤选择器
		--它的功能是选择包含指定字符串的全部元素，它通常与其他元素结合使用，获取包含“text”字符串内容的全部元素对象。
		--text需要用单引号
	-:has(selector)过滤选择器
		--包含的元素名称来过滤，:has(selector)过滤选择器的功能是获取选择器中包含指定元素名称的全部元素，
			其中selector参数就是包含的元素名称，是被包含元素。
		--选择的是父元素，也就是选择这个元素拥有特定元素
		--selector需要包含单引号
	-:hidden过滤选择器
		--:hidden过滤选择器的功能是获取全部不可见的元素，这些不可见的元素中包括type属性值为hidden的元素。
	-:visible过滤选择器
		--:hidden过滤选择器相反，:visible过滤选择器获取的是全部可见的元素，
			也就是说，只要不将元素的display属性值设置为“none”，那么，都可以通过该选择器获取。
	-[attribute=value]属性选择器
		--属性选择器的功能是获取与属性名和属性值完全相同的全部元素，其中[]是专用于属性选择器的括号符，
			参数attribute表示属性名称，value参数表示属性值。
		--$("li[attribute=value]")
	-[attribute!=value]属性选择器
		--与上述相反
	-[attribute*=value]属性选择器
		--它可以获取属性值中包含指定内容的全部元素，其中[]是专用于属性选择器的括号符，
			参数attribute表示属性名称，value参数表示对应的属性值。
	-:first-child子元素过滤选择器
		--选择某组标签的第一个标签。选择一组相同标签中的第一个元素。
		--返回是个集合
	-:last-child子元素过滤选择器
		--与上相反
三、表单选择器
	-:input表单选择器
		--:input表单选择器可以实现，它的功能是返回全部的表单元素，不仅包括所有<input>标记的表单元素，
			而且还包括<textarea>、<select> 和 <button>标记的表单元素
		--$("#frmTest :input") 中间有一个空格
		--其实加上空格，是运用到了复合选择器中的ance desc层次选择器，祖先与后代的关系。
	-:text表单文本选择器
		--与上类似，只是选取范围变小。并且表单选择器只获取单行的文本输入框元素，对于<textarea>区域文本、按钮元素无效。
		--而伪类选择器:这个冒号，在css中是针对某特定的元素对象的某个状态，在jQuery中，
		伪类选择器的应用变得广泛起来，有位置选择，属性选择，文本选择
		。
	-:password表单密码选择器
		--:password
	-:radio单选按钮选择器
		--:radio
	-:checkbox复选框选择器
		--:checkbox
	-:submit提交按钮选择器
		--:submit
	-:image图像域选择器
	-:button表单按钮选择器
		--:button选择器能获取且只能获取“type”属性值为“button”的<input>和<button>这两类普通按钮元素。
		--submit能获取“type”属性值为“submit”的<input>和<button>这两类普通按钮元素。
	-:checked选中状态选择器
	-:selected选择器
		--:selected选择器只能获取<select>下拉列表框中全部处于选中状态的<option>选项元素。
四、jQuery 操作DOM元素
	-使用attr()方法控制元素的属性
		--attr()方法的作用是设置或者返回元素的属性，其中attr(属性名)格式是获取元素属性名的值，
			attr(属性名，属性值)格式则是设置元素属性名的值。
	-操作元素的内容
		--使用html()和text()方法操作元素的内容，当两个方法的参数为空时，表示获取该元素的内容，
			而如果方法中包含参数，则表示将参数值设置为元素内容。
		--html()方法可以获取元素的HTML内容，因此，原文中的格式代码也被一起获取，
			而text()方法只是获取元素中的文本内容，并不包含HTML格式代码
		--.val()方法.val()无参数，获取匹配的元素集合中第一个元素的当前值
			.val( value )，设置匹配的元素集合中每个元素的值
			.val( function ) ，一个用来返回设置值的函数
		--.html()是用来读取元素的html内容（包括html标签），.text()用来读取元素的纯文本内容，包括其后代元素，
			.val()是用来读取表单元素的"value"值。
			其中.html()和.text()方法不能使用在表单元素上,而.val()只能使用在表单元素上
			.html()方法使用在多个元素上时，只读取第一个元素；.val()方法和.html()相同，
			如果其应用在多个元素上时，只能读取第一个表单元素的"value"值，
			但是.text()和他们不一样，如果.text()应用在多个元素上时，将会读取所有选中元素的文本内容。
		--.html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容，
			如果三个方法同时运用在多个元素上时，那么将会替换所有选中元素的内容。
		--读取只读取一个，替换则替换所有

	-操作元素的样式
		--过addClass()和css()方法可以方便地操作元素中的样式，前者括号中的参数为增加元素的样式名称，
			后者直接将样式的属性内容写在括号中
		--$(selector).css({property:value, property:value, ...}) //多个CSS属性/值对
		--$(selector).css(name,function(index,value)) //通过函数设置属性值
		--$(selector).css(name,value)  
		--$(selector).css(name) //获取属性值
	-移除属性和样式
		--使用removeAttr(name)和removeClass(class)分别可以实现移除元素的属性和样式的功能，
			前者方法中参数表示移除属性名，后者方法中参数则表示移除的样式名
		--removeClass("class"),此处的多class名 应包含在同一引号内 且class名之间没有“，”。
	-使用append()方法向元素内追加内容
		--append(content)方法的功能是向指定的元素中追加内容，被追加的content参数，可以是字符、HTML元素标记，
			还可以是一个返回字符串内容的函数。
	-使用appendTo()方法向被选元素内插入内容
	-addClass()
		--.addClass( className ) : 为每个匹配元素所要增加的一个或多个样式名
		--.addClass( function(index, currentClass) ) : 这个函数返回一个或更多用空格隔开的要增加的样式名
		--函数那个相当于对所有的元素进行遍历，并将当前元素的index和className传进去进行函数处理。
	-.removeClass( )方法
		--.removeClass( [className ] )：每个匹配元素移除的一个或多个用空格隔开的样式名
		--.removeClass( function(index, class) ) ： 一个函数，返回一个或多个将要被移除的样式名
	-.toggleClass()
	-.外部插入after()与before()
		--before与after都是用来对相对选中元素外部增加相邻的兄弟节点
		--2个方法都是都可以接收HTML字符串，DOM 元素，元素数组，或者jQuery对象，用来插入到集合中每个匹配元素的前面或者后面
		--2个方法都支持多个参数传递after(div1,div2,....) 
	-.外部插入insertAfter()与insertBefore()
		--before、after与insertBefore。insertAfter的除了目标与位置的不同外，后面的不支持多参数处理
	-.内部插入
		--append()向每个匹配的元素内部追加内容
		--prepend()向每个匹配的元素内部前置内容
		--appendTo()把所有匹配的元素追加到另一个指定元素的集合中
		--prependTo()把所有匹配的元素前置到另一个指定的元素集合中
	-empty()的基本用法
		--empty清空方法，但是与删除又有点不一样，因为它只移除了 指定元素中的所有子节点。
	-remove()的有参用法和无参用法
		--remove与empty一样，都是移除元素的方法，但是remove会将元素自身移除，同时也会移除元素内部的一切，
			包括绑定的事件及与该元素相关的jQuery数据。
		-- $("p").remove(":contains('3')")有参用法相当于$("p").filter(":contains('3')").remove()
	-保留数据的删除操作detach()
		--如果我们希望临时删除页面上的节点，但是又不希望节点上的数据与事件丢失，
			并且能在下一个时间段让这个删除的节点显示到页面，这时候就可以使用detach方法来处理
	-DOM拷贝clone()
		--.clone()方法深度 复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点。
		--//clone处理一 $("div").clone()   //只克隆了结构，事件丢失
		--//clone处理二 $("div").clone(true) //结构、事件与数据都克隆
		--clone()方法时，在将它插入到文档之前，我们可以修改克隆后的元素或者元素内容，
			如右边代码我 $(this).clone().css('color','red') 增加了一个颜色
	-DOM替换replaceWith()和replaceAll()
		--.replaceWith( newContent )：用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合
		--用$()选择节点A，调用replaceWith方法，传入一个新的内容B（HTML字符串，DOM元素，或者jQuery对象）
			用来替换选中的节点A
		--.replaceAll( target ) ：用集合的匹配元素替换每个目标元素
		--.replaceAll()和.replaceWith()功能类似，但是目标和源相反，用上述的HTML结构，我们用replaceAll处理
	-DOM包裹wrap()方法
		--如果要将元素用其他元素包裹起来，也就是给它增加一个父元素，针对这样的处理，JQuery提供了一个wrap方法
	-DOM包裹unwrap()方法
		--取出父元素的包裹
	-DOM包裹wrapAll()方法
		--wrap是针对单个dom元素处理，如果要将集合中的元素用其他元素包裹起来，也就是给他们增加一个父元素，
			针对这样的处理，JQuery提供了一个wrapAll方法
	-DOM包裹wrapInner()方法
		--当通过一个选择器字符串传递给.wrapInner() 函数，其参数应该是格式正确的 HTML，并且 HTML 标签应该是被正确关闭的。
		--将合集中的元素内部所有的子元素用其他元素包裹起来
	-children()方法
		--children()无参数 允许我们通过在DOM树中对这些元素的直接子元素进行搜索，并且构造一个新的匹配元素的jQuery对象
		--.children()方法选择性地接受同一类型选择器表达式 $("div").children(".selected")
	-find()方法
		--children是父子关系查找，find是后代关系（包含父子关系）
		--选择器表达式对于 .find() 是必需的参数。如果我们需要实现对所有后代元素的取回，可以传递通配选择器 '*'。
		--find只在后代中遍历，不包括自己。
	-parent()方法
		--parent()无参数
			parent()方法允许我们能够在DOM树中搜索到这些元素的父级元素，从有序的向上匹配元素，
			并根据匹配的元素创建一个新的 jQuery 对象
			jQuery是一个合集对象，所以通过parent是匹配合集中每一给元素的父元素
	-parents()方法
		--如果想快速查找合集里面的每一个元素的所有祖辈元素，此时可以用parents()方法
	-closest()方法
		--closest()方法接受一个匹配元素的选择器字符串
		--从元素本身开始，在DOM 树上逐级向上级元素匹配，并返回最先匹配的祖先元素
		--起始位置不同：.closest开始于当前元素 .parents开始于父元素
		--遍历的目标不同：.closest要找到指定的目标，.parents遍历到文档根元素，closest向上查找，
			知道找到一个匹配就停止查找，parents一直查找到根元素，并将匹配的元素加入集合
		--结果不同：.closest返回的是包含零个或一个元素的jquery对象，parents返回的是包含零个或一个或多个元素的jquery对象
	-next()方法
		--jQuery是一个合集对象，如果想快速查找指定元素集合中每一个元素紧邻的后面同辈元素的元素集合，此时可以用next()方法
	-prev()方法
	-siblings()
		--紧邻的前面后面同辈元素，此时可以用siblings()方法
	-add()方法
		--对$()选取到的集合增添元素
	-each()方法
		--遍历集合中的元素
		--each是一个for循环的包装迭代器
		  each通过回调的方式处理，并且会有2个固定的实参，索引与元素
		  each回调方法中的this指向当前迭代的dom元素
		--这样可以在循环体会做一些逻辑操作了，如果需要提前退出，可以以通过返回 false以便在回调函数内中止循环
五、事件
  鼠标事件
	-click与dbclick事件
		--方法一：$ele.click()
		  绑定$ele元素，不带任何参数一般是用来指定触发一个事件，用的比较少
		--方法二：$ele.click( handler(eventObject) )
		  this是指向了绑定事件的元素
		--方法三：$ele.click( [eventData ], handler(eventObject) )
		  使用与方法二一致，不过可以接受一个数据参数，这样的处理是为了解决不同作用域下数据传递的问题
	-mousedown与mouseup事件
		--如果在一个元素按住了鼠标不放，并且拖动鼠标离开这个元素，并释放鼠标键，这仍然是算作mousedown事件
		  任何鼠标按钮被按下时都能触发mousedown事件//mouseup不会触发该功能。
		  用event 对象的which区别按键，敲击鼠标左键which的值是1，敲击鼠标中键which的值是2，敲击鼠标右键which的值是3
	-mousemove事件
		--用户是否有移动的操作
		--mousemove事件是当鼠标指针移动时触发的，即使是一个像素
		  如果处理器做任何重大的处理，或者如果该事件存在多个处理函数，这可能造成浏览器的严重的性能问题
	-mouseover与mouseout事件
		--mouseenter事件只会在绑定它的元素上被调用，而不会在后代节点上被触发
		--mouseover事件：如果一个div和p同时绑定了mouseover事件，离开p元素，
			触发p元素事件的同时也会触发div元素事件，原因是事件冒泡问题
	-hover事件
		--只需要在hover方法中传递2个回调函数就可以了，不需要显示的绑定2个事件
		--$(selector).hover(handlerIn, handlerOut)
		  handlerIn(eventObject)：当鼠标指针进入元素时触发执行的事件函数
		  handlerOut(eventObject)：当鼠标指针离开元素时触发执行的事件函数
	-focusin事件
		--当一个元素，或者其内部任何一个元素获得焦点的时候，例如：input元素，用户在点击聚焦的时候，
			如果开发者需要捕获这个动作的时候，jQuery提供了一个focusin事件
	-focusout事件
		--当一个元素，或者其内部任何一个元素失去焦点的时候，比如input元素，用户在点击失去焦的时候，
			如果开发者需要捕获这个动作，jQuery提供了一个focusout事件
  表单事件
	-blur与foucus事件
		--focus()在元素本身产生，focusin()在元素包含的元素中产生
		--blur与focusout也亦是如此
	-change事件
		--<input>元素，<textarea>和<select>元素都是可以选择值一些改变，开发者可以通过change事件去监听这些改变的动作
	-select事件
		--选择
	-submit事件
		--form元素是有默认提交表单的行为，如果通过submit处理的话，需要禁止浏览器的这个默认行为
			传统的方式是调用事件对象  e.preventDefault() 来处理， jQuery中可以直接在函数中最后结尾return false即可
  键盘事件
	-keydown()与keyup()事件
		--当用户在一个元素上第一次松手键盘上的键的时候，就会触发它。使用方法与keydown是一致的只是触发的条件是方法的
		--keydown事件会少一个字符是因为事件触发在前，获取的是前面已经输入的字符
	-keypress()事件
		--KeyPress主要用来接收字母、数字等ANSI字符，而 KeyDown 和 KeyUP 事件过程可以处理任何不被 KeyPress 识别的击键。
			诸如：功能键（F1-F12）、编辑键、定位键以及任何这些键和键盘换档键的组合等。
  事件的绑定和解绑
	-on()的多事件绑定
		--jQuery on()方法是官方推荐的绑定事件的一个方法。
		--$("#elem").on({
		   mouseover:function(){},  
		   mouseout:function(){},
		   });
		--$("div").on("click","p",fn)
		--事件绑定在最上层div元素上，当用户触发在a元素上，事件将往上冒泡，一直会冒泡在div元素上。
		  如果提供了第二参数，那么事件在往上冒泡的过程中遇到了选择器匹配的元素，将会触发事件回调函数
	-卸载事件off()方法
		--$("elem").off("mousedown mouseup")
  事件对象的使用
	-统一定义事件，冒泡时候出现不知道是哪一个事件的问题
		事件对象是用来记录一些事件发生时的相关信息的对象。事件对象只有事件发生时才会产生，
		并且只能是事件处理函数内部访问，在所有事件处理函数运行结束后，事件对象就被销毁
		event.target代表当前触发事件的元素，可以通过当前元素对象的一系列属性来判断是不是我们想要的元素e.target.textContent
	-jQuery事件对象的属性和方法
		--event.type：获取事件的类型
		--event.pageX 和 event.pageY：获取鼠标当前相对于页面的坐标
		--event.preventDefault() 方法：阻止默认行为
		--event.stopPropagation() 方法：阻止事件冒泡
		--event.which：获取在鼠标单击时，单击的是鼠标的哪个键  左键报告1，中间键报告2，右键报告3
		--event.currentTarget : 在事件冒泡过程中的当前DOM元素  冒泡前的当前触发事件的DOM对象, 等同于this.
		  js中事件是会冒泡的，所以this是可以变化的，但event.target不会变化，它永远是直接接受事件的目标DOM元素；
   自定义事件(@RE：不是特别理解。)
	-trigger事件
		--根据绑定到匹配元素的给定的事件类型执行所有的处理程序和行为
		--相当于模拟触发
	-triggerHandler事件